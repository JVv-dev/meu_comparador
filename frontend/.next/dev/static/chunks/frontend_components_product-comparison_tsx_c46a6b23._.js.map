{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/joaov/OneDrive/Documentos/meu_comparador/frontend/components/product-comparison.tsx"],"sourcesContent":["\"use client\";\nimport React, { useEffect, useState, useMemo } from 'react';\nimport Papa from 'papaparse';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\n\n// 1. Registra os componentes do Chart.js\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\n// 2. Interface para os dados do CSV\ninterface PriceEntry {\n  timestamp: string;\n  produto_base: string;\n  nome_completo_raspado: string;\n  preco: number;\n  imagem_url: string;\n  loja: string;\n  url: string;\n}\n\n// 3. Cores fixas para cada loja\nconst storeColors = {\n  Kabum: {\n    border: 'rgb(255, 100, 0)', // Laranja\n    background: 'rgba(255, 100, 0, 0.5)',\n  },\n  Pichau: {\n    border: 'rgb(53, 162, 235)', // Azul\n    background: 'rgba(53, 162, 235, 0.5)',\n  },\n  Terabyte: {\n    border: 'rgb(75, 192, 192)', // Verde\n    background: 'rgba(75, 192, 192, 0.5)',\n  },\n};\n\nexport function ProductComparison() {\n  // Estado para todos os dados do CSV\n  const [allData, setAllData] = useState<PriceEntry[]>([]);\n  // Estado para os nomes únicos de produtos (para o dropdown)\n  const [productNames, setProductNames] = useState<string[]>([]);\n  // Estado para o produto que o usuário selecionou\n  const [selectedProduct, setSelectedProduct] = useState<string>('');\n\n  // Efeito para carregar e processar o CSV na montagem\n  useEffect(() => {\n    fetch('/precos.csv')\n      .then((response) => response.text())\n      .then((csvText) => {\n        Papa.parse<PriceEntry>(csvText, {\n          header: true,\n          dynamicTyping: true,\n          complete: (results) => {\n            const data = results.data;\n            \n            // Remove linhas vazias ou com preço nulo/inválido\n            const validData = data.filter(row => row.produto_base && row.preco !== null && row.preco !== undefined);\n\n            setAllData(validData);\n\n            // Pega os nomes únicos de produtos para o filtro\n            const uniqueProducts = [...new Set(validData.map((row) => row.produto_base))];\n            setProductNames(uniqueProducts);\n\n            // Define o primeiro produto como padrão\n            if (uniqueProducts.length > 0) {\n              setSelectedProduct(uniqueProducts[0]);\n            }\n          },\n        });\n      });\n  }, []); // Roda apenas uma vez\n\n  // Hook para transformar os dados brutos em dados de gráfico\n  // Isso só roda quando 'allData' ou 'selectedProduct' mudam\n  const chartData = useMemo(() => {\n    if (!selectedProduct) {\n      return { labels: [], datasets: [] };\n    }\n\n    // 1. Filtra os dados apenas para o produto selecionado\n    const productData = allData.filter(\n      (row) => row.produto_base === selectedProduct\n    );\n\n    // 2. Agrupa os dados por data (ex: '26/10/2025')\n    const dataByDate = new Map<string, PriceEntry[]>();\n    \n    productData.forEach((row) => {\n      const dateKey = new Date(row.timestamp).toLocaleDateString('pt-BR');\n      if (!dataByDate.has(dateKey)) {\n        dataByDate.set(dateKey, []);\n      }\n      dataByDate.get(dateKey)!.push(row);\n    });\n\n    // 3. Cria os 'labels' (datas únicas no eixo X)\n    const labels = [...dataByDate.keys()];\n\n    // 4. Cria os 'datasets' (um para cada loja)\n    const stores = ['Kabum', 'Pichau', 'Terabyte'];\n    \n    const datasets = stores.map((store) => {\n      // Para cada loja, cria um array de preços correspondente aos labels\n      const prices = labels.map((date) => {\n        const entriesForDate = dataByDate.get(date) || [];\n        const storeEntry = entriesForDate.find((e) => e.loja === store);\n        \n        // Se a loja não tiver preço naquele dia, ou for 0, usa 'null'\n        // 'null' cria uma falha na linha do gráfico, o que é correto\n        return storeEntry && storeEntry.preco > 0 ? storeEntry.preco : null;\n      });\n\n      const colors = storeColors[store as keyof typeof storeColors] || storeColors.Kabum;\n\n      return {\n        label: store,\n        data: prices,\n        borderColor: colors.border,\n        backgroundColor: colors.background,\n        tension: 0.1, // Deixa a linha levemente curvada\n      };\n    });\n\n    return { labels, datasets };\n  }, [allData, selectedProduct]);\n\n  // Opções do Gráfico\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top' as const,\n      },\n      title: {\n        display: true,\n        text: `Histórico de Preços: ${selectedProduct}`,\n      },\n      tooltip: {\n         callbacks: {\n            label: function(context: any) {\n                let label = context.dataset.label || '';\n                if (label) {\n                    label += ': ';\n                }\n                if (context.parsed.y !== null) {\n                    label += new Intl.NumberFormat('pt-BR', { style: 'currency', currency: 'BRL' }).format(context.parsed.y);\n                }\n                return label;\n            }\n         }\n      }\n    },\n    scales: {\n      y: {\n        ticks: {\n          callback: (value: number | string) => `R$ ${value}`,\n        },\n      },\n    },\n  };\n\n  return (\n    <div style={{ padding: '20px', maxWidth: '1000px', margin: 'auto' }}>\n      <h1>Monitor de Preços</h1>\n\n      {/* Filtro Dropdown de Produtos */}\n      <div style={{ marginBottom: '20px' }}>\n        <label htmlFor=\"product-select\" style={{ marginRight: '10px', fontWeight: 'bold' }}>\n          Selecionar Produto:\n        </label>\n        <select\n          id=\"product-select\"\n          value={selectedProduct}\n          onChange={(e) => setSelectedProduct(e.target.value)}\n          style={{ padding: '5px' }}\n        >\n          {productNames.map((name) => (\n            <option key={name} value={name}>\n              {name}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {/* O Gráfico de Linha */}\n      {chartData.labels.length > 0 ? (\n        <Line options={options} data={chartData} />\n      ) : (\n        <p>Carregando dados ou nenhum dado encontrado...</p>\n      )}\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}